---
import { UserService } from "../../../services/UserService";
import Layout from "../../../layouts/Layout.astro";
import PostComponent from "../../../components/PostComponent.astro";
import { AuthService } from "../../../services/AuthService";
import { PostService } from "../../../services/PostService";
import type { Post } from "../../../class/Post";
import UserRecommendation from "../../../components/UserRecommendation.astro";
import { ensureValidToken } from "../../../utils/auth";

const redirect = await ensureValidToken(Astro);
if (redirect) return redirect;
const { id } = Astro.params;
const token = Astro.cookies.get("token")?.value;
let posts;
let user;
let isFollowed;
try {
  user = await UserService.fetchUserById(Number(id), token!);
  if (!user) {
    return Astro.redirect("/");
  }
  isFollowed = await UserService.isUserFollowedByCurrentUser(user.id, token!);
  posts = await PostService.fetchPostsByUserId(Number(id), token!);
} catch (error) {
  console.error("Error fetching user by ID:", error);
  return Astro.redirect("/");
}
---

<Layout>
  <section class="flex flex-col gap-4 py-4 w-3/4 border-x border-primary">
    <div class="flex flex-col">
      <h1 class="text-2xl text-primary font-bold pl-4 py-2">Profile</h1>
    </div>

    <div class="flex flex-col gap-4 ml-4">
      <img
        src={user?.profileImageUrl || "/logo.svg"}
        alt={`${user?.displayName || "User"}'s profile picture`}
        class="h-24 w-24 rounded-full"
      />
    </div>
    <div class="flex items-center gap-4 w-full px-4 justify-between">
      <div class="flex flex-col">
        <h2 class="text-xl text-primary font-bold">
          {user?.displayName}
        </h2>
        <p class="text-lg text-primary">{user?.userTag}</p>
      </div>
      <button
        id="follow-btn"
        class="btn btn-primary cursor-pointer text-lg px-4 py-2"
        aria-data={isFollowed}
        data-user-id={user?.id}>{isFollowed ? "Unfollow" : "Follow"}</button
      >
    </div>
    <div class="flex items-center gap-4 w-full px-4">
      <div>
        <a
          href={`/user/${user?.id}/followers`}
          class="text-primary hover:underline">Followers</a
        >
        <span class="mx-2 text-primary font-semibold">|</span>
        <a
          href={`/user/${user?.id}/following`}
          class="text-primary hover:underline">Following</a
        >
      </div>
    </div>

    <div
      class={`border-t border-primary w-full h-full mt-4 ${!posts || posts.length === 0 ? " text-8xl flex items-center justify-center text-primary" : ""}`}
    >
      {
        posts && posts.length > 0 ? (
          posts.map((post: Post) => <PostComponent post={post} />)
        ) : (
          <p>This user has not posted yet</p>
        )
      }
    </div>
  </section>
  <UserRecommendation />
</Layout>
<script>
  import { UserService } from "../../../services/UserService";

  document.addEventListener("DOMContentLoaded", () => {
    const followBtn = document.getElementById("follow-btn");
    console.log("Follow Button:", followBtn);

    if (followBtn) {
      followBtn.addEventListener("click", async () => {
        const isFollowed = followBtn.getAttribute("aria-data") === "true";
        const userId = followBtn.getAttribute("data-user-id");
        const token = document.cookie
          .split("; ")
          .find((row) => row.startsWith("token="))
          ?.split("=")[1];
        try {
          if (isFollowed) {
            await UserService.unfollowUser(Number(userId), token!);
            followBtn.textContent = "Follow";
            followBtn.setAttribute("aria-data", "false");
          } else {
            await UserService.followUser(Number(userId), token!);
            followBtn.textContent = "Unfollow";
            followBtn.setAttribute("aria-data", "true");
          }
        } catch (error) {
          console.error("Error toggling follow status:", error);
        }
      });
    }
  });
</script>
