---
import { UserService } from "../services/UserService";

const { post } = Astro.props;
const token = Astro.cookies.get("token")?.value;
const user = await UserService.fetchUserById(post.userId, token!);
const currentUser = await UserService.fetchCurrentUser(token!);
---

<div class="w-full border-b-[1px] border-primary p-2 h-fit">
  <a
    href={user.id === currentUser.id ? `/profile` : `/user/${user.id}`}
    class="flex items-center gap-2"
  >
    <img src="/logo.svg" alt="user picture" class="h-10 w-10 rounded-full" />
    <div class="flex flex-col justify-center">
      <h1 class="text-primary font-semibold text-lg">{user?.displayName}</h1>
      <p class="text-sm text-gray-500 -mt-1.5">@{user?.userTag}</p>
    </div>
  </a>
  <div class="ml-8 px-4 -mt-2">
    <h1 class="text-primary text-lg mt-4">{post.title}</h1>
    <p class="text-sm text-gray-500">{post.content}</p>
  </div>

  {
    post.images?.length !== 3 ? (
      <div
        class={`grid ${post.images?.length >= 2 ? "grid-cols-2" : ""} ${post.images?.length > 2 ? "grid-rows-2" : ""} max-h-80 gap-2 m-4 ml-8`}
      >
        {post.images?.map((image: string, index: number) => (
          <img
            src={image}
            alt={`post image ${index + 1}`}
            class="relative w-full h-40 object-cover rounded-lg"
          />
        ))}
      </div>
    ) : (
      <div class="grid grid-cols-2 grid-rows-2 gap-2 h-80 m-4 ml-8">
        <img
          src={post.images?.[0]}
          alt={`post image 0`}
          class="relative w-full h-full row-span-2 object-cover rounded-lg"
        />
        {post.images?.slice(1).map((image: string, index: number) => (
          <img
            src={image}
            alt={`post image ${index + 1}`}
            class="relative w-full h-full object-cover rounded-lg"
          />
        ))}
      </div>
    )
  }
  <div class="flex items-center justify-between mt-1 px-4">
    <div class="flex items-center gap-2">
      <p class="text-primary" id="like-count">{post.likeCount}</p>
      <button
        id="like-button"
        class="cursor-pointer"
        aria-isLiked={post.likedByCurrentUser}
        aria-post-id={post.id}
      >
        {
          post.likedByCurrentUser ? (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="#A79A0D"
              class="size-6"
            >
              <path d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001Z" />
            </svg>
          ) : (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="#A79A0D"
              class="size-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
              />
            </svg>
          )
        }
      </button>
    </div>
  </div>
</div>
<script>
  import { PostService } from "../services/PostService";

  document.addEventListener("DOMContentLoaded", () => {
    const likeButtons = document.querySelectorAll("[id^='like-button']");
    const likeCounts = document.querySelectorAll("[id^='like-count']");
    console.log("Like buttons:", likeButtons);

    likeButtons.forEach((likeButton, index) => {
      likeButton.addEventListener("click", async (e) => {
        e.preventDefault();
        const postIdStr = likeButton.getAttribute("aria-post-id");
        const postId = postIdStr ? Number(postIdStr) : null;
        const isLiked = likeButton.getAttribute("aria-isLiked") === "true";
        const token = document.cookie
          .split("; ")
          .find((row) => row.startsWith("token="))
          ?.split("=")[1];
        try {
          if (postId === null || isNaN(postId)) {
            throw new Error("Invalid post ID");
          }
          if (isLiked) {
            await PostService.unlikePost(postId, token!);
            if (likeCounts[index] && likeCounts[index].textContent) {
              likeCounts[index].textContent = (
                parseInt(likeCounts[index].textContent) - 1
              ).toString();
            }
            likeButton.innerHTML = `<svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="#A79A0D"
                class="size-6"
                >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
                ></path>
                </svg>`;
          } else {
            await PostService.likePost(postId, token!);
            if (likeCounts[index] && likeCounts[index].textContent) {
              likeCounts[index].textContent = (
                parseInt(likeCounts[index].textContent) + 1
              ).toString();
            }
            likeButton.innerHTML = `<svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="#A79A0D"
              class="size-6"
            >
              <path d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001Z" />
            </svg>`;
          }
          // Update the button state
          likeButton.setAttribute("aria-isLiked", (!isLiked).toString());
        } catch (error) {
          console.error("Error liking/unliking post:", error);
        }
      });
    });
  });
</script>
